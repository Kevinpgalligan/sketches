### Sketches
- Halt & Catch Fire-esque image leaking
- Coloured squares, squares within squares
- Jigsaw effect
- Map of underground
- Layers of bezier curves, colour between each layer.
- Tiling.
- That graph thing in the Singapore museum.
- Fibonacci spiral.
- Artesonado Spanish-style ceiling patterns: https://en.wikipedia.org/wiki/Artesonado
- Soft body physics: https://www.youtube.com/watch?app=desktop&v=IxdGyqhppis&pp=ygUMY29kaW5nIHRyYWlu
- Cracked glass.
- Guggenheim stuff.
- Recreate this: https://old.reddit.com/r/p5js/comments/youwzy/generative_impressionism_flowers_100_code/ivg57ro/
- Fractional brownian motion (or something), some cool ideas here: https://www.reddit.com/r/generative/comments/10ytw9f/
- Sine waves for noise: https://www.reddit.com/r/generative/comments/zor03v/sine_wave_alert_r_code/j0ufkta/?context=3
- https://github.com/jasonwebb/2d-differential-growth-experiments
- Resources for flow fields / noise: https://www.reddit.com/r/generative/comments/xlwdpc/rush_hour/ipmps83/
- Noise resources:
 * Inigo something's articles.
 * https://thebookofshaders.com/11/
 * https://www.scratchapixel.com/lessons/procedural-generation-virtual-worlds/perlin-noise-part-2/perlin-noise-terrain-mesh.html
 * https://thebookofshaders.com/11/
- Splines (she also did one on Bezier curves): https://www.reddit.com/r/gamedev/comments/zp3x9r/freya_holm%C3%A9r_the_continuity_of_splines/
- Deep dive on Bezier curves: https://pomax.github.io/bezierinfo/
- https://www.reddit.com/r/generative/wiki/index
- https://thecodingtrain.com/challenges
- YouTube channels for generative art:
   https://www.youtube.com/@StevesMakerspace
   https://sighack.com/
   https://tylerxhobbs.com/essays
   https://www.bit-101.com/blog/

### TODO
* Add alternative defsketch macro that allows passing mixins. This would allow, e.g., a mixin for save functionality or for a GUI with toggleable params.
* Finish Gleefre's double buffering fix.
  -> It's somehow related to double-buffering.
  -> sketch currently turns off double buffering as a hack.
  -> That's not possible w/ Intel graphics?
  -> Better solution to use FBO somehow? (All this according to vyyd).
  -> Gleefre's WIP:
     https://github.com/Gleefre/sketch/tree/gleefre/use-fbos-for-copy-pixels 
* Record sketches.
  > Bindings for a video encoding library.
    - https://stackoverflow.com/questions/23100282/x264-encoder-api
    - https://github.com/corecodec/x264/blob/master/example.c
    - https://stackoverflow.com/questions/42639008/what-is-the-yuv-format-from-the-point-of-view-of-a-beginner-who-do-not-know-ho#42639009
    - https://stackoverflow.com/questions/2940671/how-does-one-encode-a-series-of-images-into-h264-using-the-x264-c-api
  > Use bindings to save sketches.
* Canvas features: initialise from an image, get current colour at coordinate.

### Blocked
* Perlin noise (add interface to sketch, pending addition to quicklisp).

### How sketch / OpenGL / sdl2 stuff works
Gleefre's explanation:

Well, it is not too bad, and it works more or less fine.
background is just a direct call to GL IIRC, like glClear or something
Other primitives all are just pushing triangles with different primitives, like :triangle-fan or :triangle-strip
Then push-vertices does the job
There are three "modes": :gpu, which writes the vertices to a buffer and then calls glDrawArrays
:figure, that writes vertices to a CL vector, and then later when figure is rendered it is copied to a gl's buffer and glDrawArray is called
nil, IIUC, just doesn't draw anything
This gl's buffer -- is just a buffer, VBO -- is configured via sketch's vao (which is defined once in the beginning of drawing.lisp)
It is used as a streaming buffer, as described here: http://onrendering.blogspot.com/2011/10/buffer-object-streaming-in-opengl.html
or also here (not sure): https://www.khronos.org/opengl/wiki/Buffer_Object_Streaming
So (start-draw) just binds the VBO, VAO; but also it "orphanes" the buffer, that is, it says to OpenGL "please give me a new buffer of the same size"
And (end-draw) just unbinds those
And later kit.sdl2:render :around or :after method calls sdl2:swap-window or something

Which tells OpenGL to swap front & back buffers, that is, to move the scene you drew to the screen
And here is how copy-pixels t works: it assumes that there is one back buffer, which is then copied to the front buffer; and just doesn't clear it with (background ...) in the beginning of rendering
This is why when "swapping buffers" works otherwise it is bugged
From sdl2kit:
(defmethod render :before ((window gl-window))
  (with-slots (gl-context) window
    (sdl2:gl-make-current (sdl-window window) gl-context)))

(defmethod render :after ((window gl-window))
  (when (autowrap:valid-p (sdl-window window))
    (gl:flush)
    (sdl2:gl-swap-window (sdl-window window))))

:before method makes sure that correct gl context is loaded,
:after method makes sure that all drawing commands are finished (gl:flush), and then swaps the window (sdl2:gl-swap-window)

There is also :around method that calls next method in cl-sdl2's main thread, so that all drawing is happening in the same main thread.
(By the way, all event handlers are also run in the main thread, so the main loop looks like this:
-- redraw all windows that have idle-render set to T
-- handle all events
-- repeat)

OpenGL's pipeline is like this:
-- FBO is the destination where drawing commands are rendered, some sort of a "canvas"
-- You can draw a number of triangles in one command, that is, glDrawArrays
  For that you need:
  -- put their coordinates and other attributes (like color) in a buffer -- that is, an array that is stored on GPU
  -- they are then handled by a vertex shader, a program that runs on GPU and can apply vertex transforms for example
    this is where all transforms are handled, mostly -- the current transform matrix is set before the glDrawArrays call, and is used in the shader.
  -- then these triangles are rendered by OpenGL, for each triangle a set of pixels (or fragments) to be drawn is determined
  -- these fragments are passed to the fragment shader, again a program that runs on GPU and it says which color should be used for this pixel
    this is where color is used (which is calculated as "average color of vertices", although it also could be passed to the whole call like with the transform matrix
    this is also how images are drawn: a texture is passed to the whole draw call, and texture coordinates are used to get a color from a picture to be drawn
  -- these pixels / fragments can overlap, so blending is happening, that is, the final color is calculated with respect to transparency according to special rules
    (there are different modes, sketch uses :one-minus-src-alpha or something like tis)

### Canvas speedup
Steps:
  1. Try optimising w/ type declarations, see how much faster it gets.
     Also do profiling.
  2. static-vectors (see phoe's article), replace-foreign-memory
       AND/OR
  3. shareable-vectors + memcpy
  4. fast-io thing

Research:
  --> "CFFI arrays versus STATIC-VECTORS"
    https://mov.im/blog/phoe%40movim.eu/cffi-arrays-versus-static-vectors-a-comparison-SCutJQ
  --> Possibly useful library for fast writes to static buffers.
    https://github.com/rpav/fast-io
  --> static-vectors `replace-foreign-memory` may be useful.
    See:
    https://github.com/sionescu/static-vectors/blob/master/src/impl-sbcl.lisp
    But if we're writing to a foreign memory buffer, why not just
    write directly to the OpenGL buffer?

Profiling...
   Seems to be scaling linearly, at least.
   600x600 canvas: 360k pixels, 0.8s => 2.22778 microseconds/pixel
   100x100 canvas: 10,000 pixels, 0.055s => 5.5 microseconds/pixel

Sample profiling call...
(time (make-mandelbrot-image 100 100 -1.0 +1.0 100 16.0))
 Evaluation took:
  0.055 seconds of real time
  0.055238 seconds of total run time (0.055238 user, 0.000000 system)
  100.00% CPU
  121,551,716 processor cycles
  1,310,528 bytes consed

There's a lot of cons-ing happening! I know cffi does cons-ing for each write. So it should be faster if we can eliminate that.

Weird... seems like most consing is happening outside canvas-paint-gray255!?

#<SKETCH::CANVAS {1008F8B9F3}>
MANDELBROT> (sb-profile:report)
  seconds  |     gc     |   consed   |  calls  |  sec/call  |  name  
----------------------------------------------------------
     0.791 |      0.007 | 46,155,472 |       1 |   0.790997 | MAKE-MANDELBROT-IMAGE
     0.080 |      0.000 |  1,146,880 | 360,000 |   0.000000 | CANVAS-PAINT-GRAY255
     0.003 |      0.000 |          0 |       1 |   0.002999 | CANVAS-LOCK
     0.000 |      0.000 |          0 |       1 |   0.000000 | MAKE-CANVAS
----------------------------------------------------------
     0.874 |      0.007 | 47,302,352 | 360,003 |            | Total

estimated total profiling overhead: 0.76 seconds
overhead estimation parameters:
  7.2e-8s/call, 2.098e-6s total profiling, 9.4800004e-7s internal profiling

These functions were not called:
 CFFI:FOREIGN-ARRAY-TO-LISP CFFI:LISP-ARRAY-TO-FOREIGN

Now ran a version of make-mandelbrot-image w/ the canvas painting gone -- still takes a lot of time!

MANDELBROT> (time (make-mandelbrot-image 600 600 -1.0 +1.0 100 16.0))
Evaluation took:
  0.646 seconds of real time
  0.646718 seconds of total run time (0.646718 user, 0.000000 system)
  [ Run times consist of 0.008 seconds GC time, and 0.639 seconds non-GC time. ]
  100.15% CPU
  1,426,182,664 processor cycles
  23,004,816 bytes consedy

So canvas painting isn't the bottleneck I thought it was. Also, Coding Train's JS version seems SLOWER than mine, unlike what I originally thought?
It may be that my canvas-paint-gray255 works better than expected, maybe try a version w/ vanilla canvas-paint.

Version w/ canvas-paint:

(time (make-mandelbrot-image 600 600 -1.0 +1.0 100 16.0))
Evaluation took:
  1.320 seconds of real time
  1.322146 seconds of total run time (1.322146 user, 0.000000 system)
  [ Run times consist of 0.019 seconds GC time, and 1.304 seconds non-GC time. ]
  100.15% CPU
  2,914,382,680 processor cycles
  198,736,944 bytes consed

SBCL profile:
  
  seconds  |     gc     |    consed   |  calls  |  sec/call  |  name  
-----------------------------------------------------------
     1.157 |      0.019 | 143,523,152 |       1 |   1.156999 | MAKE-MANDELBROT-IMAGE
     0.317 |      0.006 |  55,191,696 | 360,000 |   0.000001 | CANVAS-PAINT
-----------------------------------------------------------
     1.474 |      0.025 | 198,714,848 | 360,001 |            | Total

So a ~4x speedup from using canvas-paint-gray255. Seems worth it, even though that's not the bottleneck.

Now wondering how much of that is due to using defun over defmethod?
Anyway.

Okay, comparing pixel-by-pixel rect painting vs canvas w/ canvas-paint-gray-255.
reaction diffusion sketch.
Each drawing iteration takes...
   0.002 seconds w/ canvas.
   0.035 seconds w/ pixel-by-pixel.
So it's almost a 20x speedup.
I think it is noticeably faster to the eye, and also looks a lot better due to linear interpolation between the cells (when blowing it up).
